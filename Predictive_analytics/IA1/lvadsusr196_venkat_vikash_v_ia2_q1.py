# -*- coding: utf-8 -*-
"""LVADSUSR196_Venkat_Vikash_V_IA2_Q1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ttReXZitJjbMoHSC69JZkWg3PHLI87GE
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split

df = pd.read_csv("/content/winequality-red.csv")

df.head()

df.info()

df.isnull().sum()

#Filling with median value
median = df['fixed acidity'].median()
df['fixed acidity'] = df['fixed acidity'].fillna(median)

median = df['volatile acidity'].median()
df['volatile acidity'] = df['volatile acidity'].fillna(median)

median = df['citric acid'].median()
df['citric acid'] = df['citric acid'].fillna(median)

median = df['residual sugar'].median()
df['residual sugar'] = df['residual sugar'].fillna(median)

median = df['chlorides'].median()
df['chlorides'] = df['chlorides'].fillna(median)

median = df['free sulfur dioxide'].median()
df['free sulfur dioxide'] = df['free sulfur dioxide'].fillna(median)

median = df['sulphates'].median()
df['sulphates'] = df['sulphates'].fillna(median)

df.isnull().sum()

"""**EDA**"""

sns.pairplot(df)

sns.boxplot(df)

"""**ONE HOT ENCODING**"""

df.head()

"""TRANSFORMING TARGET VARIABLE"""

#Transforming target variable into good or bad (0 or 1)
quality = np.array(df['quality'])

for i in range(len(quality)):
  if quality[i]>=3 and quality[i]<=6:
    quality[i] = 0
  elif quality[i]==7 or quality[i]==8:
    quality[i] = 1

df['quality'] = quality

df['quality'].unique()

"""**RANDOM FOREST ALGORITHM**"""

#WITH TRANSFORMING
x = df.drop(columns = ['quality'])
y = df['quality']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3)
model = RandomForestClassifier(n_estimators=100,random_state=42)
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

#CONFUSION MATRIX AND CLASSIFCATION REPORT
#WITHOUT TRANSFORMING TARGET VARIABLE
conf_matrix = confusion_matrix(y_test, y_pred)

print("Confusion Matrix:")
print(conf_matrix)

print("Classification Report:")
print(classification_report(y_test, y_pred))