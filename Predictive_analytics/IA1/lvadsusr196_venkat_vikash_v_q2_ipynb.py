# -*- coding: utf-8 -*-
"""LVADSUSR196_Venkat_Vikash_V_Q2_ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rbGl0CgwfPd8Tji6kH4UKff0h6FOFtf3

**MODEL IMPORT**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

df = pd.read_csv("/content/booking.csv")

df.head()

"""**HANDLING MISSING VALUES AND OUTLIERS**"""

df.isnull().sum()
#There are null values in average price and room type

#Handling null values by filling the most occuring room type
mode = df['room type'].mode()
df['room type'] = df['room type'].fillna('Room_Type 1')

#Filling the data with median
median = df['average price'].median()
df['average price'] = df['average price'].fillna(median)

#No null Values
df.isnull().sum()

# No duplicates present
df.duplicated().sum()

"""**OUTLIER DETECTION**"""

#OUTLIER DETECTION

# Identify numerical columns by data type
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#BI VARIATE AND CORRELATION
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

df.head()

"""**ONE HOT ENCODING**"""

df.columns

#Encoded data
dummies = pd.get_dummies(df[['type of meal','room type','market segment type','booking status']])

encoded_df = pd.concat([df[['number of adults', 'number of children','number of weekend nights',
                       'number of week nights','car parking space','lead time','repeated',
                       'P-C', 'P-not-C']],dummies],axis=1)

encoded_df.columns

correlation_matrix = encoded_df.corr()
correlation_matrix
#From the heatmap we could see that reigion is not highly correlated with charges

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['booking status'] = le.fit_transform(df['booking status'])

X = encoded_df[['number of adults', 'number of children', 'number of weekend nights',
       'number of week nights', 'car parking space', 'lead time', 'repeated',
       'type of meal_Meal Plan 1',
       'type of meal_Meal Plan 2', 'type of meal_Meal Plan 3',
       'type of meal_Not Selected', 'room type_Room_Type 1',
       'room type_Room_Type 2', 'room type_Room_Type 3',
       'room type_Room_Type 4', 'room type_Room_Type 5',
       'room type_Room_Type 6', 'room type_Room_Type 7',
       'market segment type_Aviation', 'market segment type_Complementary',
       'market segment type_Corporate', 'market segment type_Offline',
       'market segment type_Online']]
y = df['booking status']

#train test split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3)

#Feature Scaling using MinMaxScaler
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train,y_train)
y_pred = model.predict(X_test)

y_pred

"""**EVALUVATION METRICS**"""

#CONFUSION MATRIX AND CLASSIFCATION REPORT
conf_matrix = confusion_matrix(y_test, y_pred)

print("Confusion Matrix:")
print(conf_matrix)

print("Classification Report:")
print(classification_report(y_test, y_pred))

"""We could see the True positives,False Positives,True Negatives and False Negatives from the following confusion matrix. We could also infer that the accuracy of the model is 76.

Precision is found to be 0.67 and 0.78 respectively
"""