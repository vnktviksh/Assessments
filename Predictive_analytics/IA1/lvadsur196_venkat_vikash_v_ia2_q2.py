# -*- coding: utf-8 -*-
"""LVADSUR196_Venkat_Vikash_V_IA2_Q2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dkqh_HtiQrbQBfM1stvKpCu2yOJKmRlX
"""

#IMPORT FOR K-MEANS

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import pearsonr
from scipy.stats import chi2_contingency
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import silhouette_score

df = pd.read_csv("/content/Mall_Customers.csv")

df.head()

df.info()

df.isnull().sum()

median = df['Annual Income (k$)'].median()
df['Annual Income (k$)'] = df['Annual Income (k$)'].fillna(median)

"""**EDA**"""

sns.pairplot(df)

#Checking Correalation
corr = df.corr(numeric_only = True)
sns.heatmap(corr,annot=True)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])

encoded_df = df[['Gender','Age','Annual Income (k$)','Spending Score (1-100)']]

#WCSS K-MEANS

from sklearn.cluster import KMeans
import numpy as np
import matplotlib.pyplot as plt

wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(encoded_df)
    wcss.append(kmeans.inertia_)

# Plot the elbow method graph
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='-')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('Within-Cluster Sum of Squares (WCSS)')
plt.xticks(np.arange(1, 11, 1))
plt.grid(True)
plt.show()

"""From the elbow method we could see optimal clusters is 4"""

# ACTUAL K-MEANS

kmeans = KMeans(n_clusters=4, random_state=0)
kmeans.fit(encoded_df)
labels = kmeans.labels_
df['clusters'] = labels
centers = kmeans.cluster_centers_

plt.figure(figsize=(8, 6))
plt.scatter(encoded_df['Annual Income (k$)'], encoded_df['Spending Score (1-100)'], c=labels, cmap='viridis', s=50, alpha=0.5)

# Assign names to the clusters
cluster_names = ['Cluster 1', 'Cluster 2', 'Cluster 3','Cluster 4']

# Create legend with cluster names
for i, cluster_name in enumerate(cluster_names):
    plt.scatter([], [], label=cluster_name, c=plt.cm.viridis(i / (len(cluster_names) - 1)), alpha=0.5)

plt.title('K-means Clustering')
plt.xlabel('X1')
plt.ylabel('X2')
plt.legend()
plt.show()

# K-MEANS EVALUVATION METRICS

from sklearn.metrics import silhouette_score
print(silhouette_score(encoded_df,kmeans.labels_))