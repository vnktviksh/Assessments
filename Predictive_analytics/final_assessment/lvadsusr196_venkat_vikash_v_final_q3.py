# -*- coding: utf-8 -*-
"""LVADSUSR196_Venkat_Vikash_V_final_Q3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jYvJjuxbuemO6t2B0YiLfIzQcKGjsFsq
"""

#IMPORTS FOR EVERYTHING
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import silhouette_score
from sklearn.metrics import r2_score,mean_squared_error
import seaborn as sns
#model import
from sklearn.cluster import KMeans

df = pd.read_csv("/content/customer_segmentation.csv")

df.head()

df.columns

df.info()

"""**HANDLING NULL VALUES AND OUTLIERS**"""

df.isnull().sum()

#Handling null values
# Filling with the mode
mode = df['Income'].mode()
df['Income'] = df['Income'].fillna(7500)

#Checking for duplicates
df.duplicated().sum()

"""**EDA**"""

new_df = df[['Income','Recency','MntWines','NumWebVisitsMonth','Z_CostContact','Z_Revenue']]
sns.pairplot(new_df)

plt.hist(df['Income'])

#There is high correlation between income and recency
plt.scatter(df['Income'],df['Recency'])

"""**HANDLING OUTLIERS**"""

sns.boxplot(df)

X = df[['Income','Recency','MntWines','NumWebVisitsMonth','Z_CostContact','Z_Revenue']]

X.isnull().sum()

#WCSS K-MEANS
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

# Plot the elbow method graph
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='-')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('Within-Cluster Sum of Squares (WCSS)')
plt.xticks(np.arange(1, 11, 1))
plt.grid(True)
plt.show()

"""**OPTIMAL NUMBER OF CLUSTERS IS 3**"""

kmeans = KMeans(n_clusters=3, random_state=0)
kmeans.fit(X)
labels = kmeans.labels_
df['clusters'] = labels
centers = kmeans.cluster_centers_

plt.figure(figsize=(8, 6))
plt.scatter(X['Recency'], X['Income'], c=labels, cmap='viridis', s=50, alpha=0.5)

# Assign names to the clusters
cluster_names = ['Cluster 1', 'Cluster 2','Cluster 3']

# Create legend with cluster names
for i, cluster_name in enumerate(cluster_names):
    plt.scatter([], [], label=cluster_name, c=plt.cm.viridis(i / (len(cluster_names) - 1)), alpha=0.5)

plt.title('K-means Clustering')
plt.xlabel('X1')
plt.ylabel('X2')
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score
print(silhouette_score(X,kmeans.labels_))