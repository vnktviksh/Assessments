# -*- coding: utf-8 -*-
"""LVADSUSR196_Venkat_Vikash_V_final_Q4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bHdOBKQt8ItEq23v7G3vuPSe02AZRvYG
"""

#IMPORTS FOR EVERYTHING
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import silhouette_score
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.ensemble import IsolationForest

df = pd.read_csv("/content/anomaly_train.csv")

df.head()

"""**NULL VALUES AND OUTLIER HANDLING**"""

df.isnull().sum()

df.duplicated().sum()

"""**EDA**"""

sns.pairplot(df)

plt.hist(df['Amount'])

"""**ONE HOT ENCODING**"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Type'] = le.fit_transform(df['Type'])
df['Location'] = le.fit_transform(df['Location'])

encoded_df = df[['Amount','Time','User']]

encoded_df.head()

#Fitting Isolation forest
clf=IsolationForest(n_estimators=100, max_samples='auto', \
                        max_features=1.0, bootstrap=False, n_jobs=-1, random_state=42, verbose=0)
clf.fit(encoded_df)

pred = clf.predict(encoded_df)
df['anomaly']=pred
outliers=df.loc[df['anomaly']==-1]
outlier_index=list(outliers.index)
#print(outlier_index)
#Find the number of anomalies and normal points here points classified -1 are anomalous
print(df['anomaly'].value_counts())

#PLOTTING

import matplotlib.pyplot as plt

# Separate normal and outlier points
normal_points = df[df['anomaly'] == 1]  # Assuming 1 represents normal points
outlier_points = df[df['anomaly'] == -1]

# Plot normal points
plt.scatter(normal_points['User'], normal_points['Time'], color='blue', label='Normal')

# Plot outlier points
plt.scatter(outlier_points['User'], outlier_points['Time'], color='red', label='Outlier')

plt.xlabel('User')
plt.ylabel('TIme')
plt.title('Scatter plot of User vs Time')
plt.legend()
plt.show()